%YAML 1.2
---
# "Asciidoctor.sublime-syntax" v0.0.27 | 2019/09/23
# ==============================================================================
#                        AsciiDoc Syntax for Asciidoctor
# ==============================================================================
# Syntax definition for Asciidoctor:
# -- https://asciidoctor.org/
# ------------------------------------------------------------------------------
# NOTE: This syntax was taken from @bsmith-n4, who slightly improved the
# original syntax by Asciidoctor. I've annotated all changes by @bsmith-n4 in
# the source, and included the original, in order to allow comparison.
#
# @bsmith-n4 changes include:
#  -- scope renaming
#  -- RegEx tweaks
#  -- new elements
#  -- element tweaks
#
#
# Ultimately, I'll try to keep the scope names of the original syntax from the
# Asciidoctor repo, but also keep the improvements by @bsmith-n4, except his own
# custom elements.
# ------------------------------------------------------------------------------
# Copyright (c) Tristano Ajmone, 2019. MIT License.
# ------------------------------------------------------------------------------

name:    AsciiDoc (Asciidoctor)
comment: AsciiDoc Syntax
file_extensions:
  - ad
  - adoc
  - asciidoc
scope: text.asciidoc

# variables:

contexts:
  main:
  # - include: lists
  - include: blocks
  - include: section_titles
  - include: lines
  - include: inline
  # - include: characters

#*******************************************************************************
#                                                                              *
#                         B L O C K    E L E M E N T S                         *
#                                                                              *
#*******************************************************************************

  blocks:
    - include: block_literal
    - include: block_comment
    # - include: custom_block                           # <- ADDED by @bsmith-n4
    - include: block_listing
    - include: block_source_fenced
    - include: block_sidebar
    - include: block_pass
    - include: block_quote
    - include: block_example
    - include: block_open
      # #- include: '#block_paragraph'           # <- COMMENTED OUT IN ORIGINAL! REMOVED by @bsmith-n4

  ################
  # BLOCK COMMENTS
  ################

  # Examples:
  #   ////
  #   A multi-line comment.
  #   Notice it's a delimited block.
  #   ////

  block_comment:
    - match: ^(/{4,})\s*$\n?
      scope: punctuation.definition.comment.begin.asciidoc
      push:
        - meta_scope: meta.block.comment.content.asciidoc
        - meta_content_scope: comment.block.asciidoc
        - match: ^\1\s*$\n?
          scope: punctuation.definition.comment.end.asciidoc
          pop: true
        # - include: macro

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_comment:
  #   comment: |
  #     Examples:
  #       ////
  #       A multi-line comment.
  #       Notice it's a delimited block.
  #       ////
  #   name: comment.block.asciidoc
  #   contentName: meta.block.comment.content.asciidoc
  #   begin: ^(/{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: punctuation.definition.comment.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: punctuation.definition.comment.end.asciidoc}
  #   - include: macro
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###############
  # CUSTOM BLOCKS
  ###############

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # custom_block:                                       # <- ADDED by @bsmith-n4
  #   name: markup.underline.block.id.def.asciidoc
  #   match: |
  #     (?x)^
  #     (\[)
  #     (sect\d|def|math|TODO|quote|example|source,?(\w+))
  #     (\s*\])
  #     \s*$\n?
  #   captures:
  #     '1': {name: markup.underline.block.asciidoc}
  #     '2': {name: markup.underline.block.asciidoc}
  #     '3': {name: variable.parameter.sourcelang.asciidoc}
  #     '4': {name: markup.underline.block.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #################
  # EXAMPLE BLOCKS
  #################
  # Examples:
  #   ====
  #   Lorem ipsum.
  #   ====

  block_example:
    - match: ^(={4,})\s*$\n?
      scope: constant.delimiter.example.begin.asciidoc
      push:
        - meta_scope: meta.block.example.content.asciidoc
        - meta_content_scope: string.unquoted.block.example.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.example.end.asciidoc
          pop: true
          # - include: lists
          # - include: block_listing
        - include: blocks
        - include: lines
        - include: inline
          # - include: characters

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_example:
  #   comment: |
  #     Examples:
  #       ====
  #       Lorem ipsum.
  #       ====
  #
  #     Note: Might need to add more includes, but these are the ones that arise in
  #     practice for me.
  #   name: string.unquoted.block.example.asciidoc
  #   contentName: meta.block.example.content.asciidoc
  #   begin: ^(={4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: constant.delimiter.example.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.example.end.asciidoc}
  #   - include: lists
  #   - include: block_listing
  #   - include: lines
  #   - include: inline
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ################
  # LISTING BLOCKS
  ################
  # Examples:
  #   ----
  #   Lorem ipsum.
  #   ----

  block_listing:
    - match: ^(\-{4,})\s*$\n?
      scope: constant.delimiter.listing.begin.asciidoc
      push:
        - meta_scope: meta.embedded.block.listing.asciidoc
        - meta_content_scope: source.block.listing.content.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.listing.end.asciidoc
          pop: true
  #   - include: inline_callout

  # IMPORTANT: This element was REMANED by @bsmith-n4! In the original:
  #
  #     '0': {name: constant.delimiter.listing.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.listing.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_listing:
  #   comment: |
  #     Examples:
  #       ----
  #       Lorem ipsum.
  #       ----
  #   name: meta.embedded.block.listing.asciidoc
  #   contentName: source.block.listing.content.asciidoc
  #   begin: ^(\-{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: markup.underline.listing.begin.asciidoc}  # <- RENAMED by @bsmith-n4
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: markup.underline.listing.end.asciidoc}    # <- RENAMED by @bsmith-n4
  #   - include: inline_callout
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ######################
  # FENCED SOURCE BLOCKS
  ######################
  # Fenced code block (ala Markdown)
  #
  # Examples:
  #   ```rb
  #   puts 'Hello world!'
  #   ```

  # TODO: Check if fence delimiter can be more than three backticks.
  # TODO: Add lang name from match regex group.

  block_source_fenced:
    - match: ^(```)(\w+)?\s*$\n?
      scope: constant.delimiter.listing.begin.asciidoc
      push:
        - meta_scope: meta.embedded.block.listing.asciidoc
        - meta_content_scope: source.block.listing.content.asciidoc
        # - match: ^\1\s*($|\n)
        - match: '^\1\s*$\n?'
          scope: constant.delimiter.listing.end.asciidoc
          pop: true
        # - include: inline_callout

    # name: meta.embedded.block.listing.asciidoc
    # contentName: source.block.listing.content.asciidoc
    # begin: ^(```)(\w+)?\s*$\n?
    # beginCaptures:
    #   '0': {name: constant.delimiter.listing.begin.asciidoc}
    # end: ^\1\s*$\n?
    # endCaptures:
    #   '0': {name: constant.delimiter.listing.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_source_fenced:
  #   comment: |
  #     Fenced code block (ala Markdown)
  #
  #     Examples:
  #       ```rb
  #       puts 'Hello world!'
  #       ```
  #   name: meta.embedded.block.listing.asciidoc
  #   contentName: source.block.listing.content.asciidoc
  #   begin: ^(```)(\w+)?\s*$\n?
  #   beginCaptures:
  #     '0': {name: constant.delimiter.listing.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.listing.end.asciidoc}
  #   - include: inline_callout
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ################
  # LITERAL BLOCKS
  ################
  # Examples:
  #   ....
  #   Lorem ipsum.
  #   ....
  block_literal:
    - match: ^(\.{4,})\s*$\n?
      scope: constant.delimiter.block.literal.begin.asciidoc
      push:
        - meta_scope: meta.block.literal.content.asciidoc
        - meta_content_scope: string.literal.block.delimited.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.block.literal.end.asciidoc
          pop: true
        # - match: ^.*$\n?
        #   scope: meta.block.literal.content.asciidoc
        # - include: inline_callout
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_literal:
  #   comment: |
  #     Examples:
  #       ....
  #       Lorem ipsum.
  #       ....
  #   name: string.literal.block.delimited.asciidoc
  #   contentName: meta.block.literal.content.asciidoc
  #   begin: ^(\.{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: constant.delimiter.block.literal.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.block.literal.end.asciidoc}
  #   - include: inline_callout
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #############
  # OPEN BLOCKS
  #############
  # Examples:
  #   --
  #   Lorem ipsum
  #   --

  block_open:
    - match: ^\-\-\s*$\n?
      scope: constant.delimiter.block.open.begin.asciidoc
      push:
        - meta_scope: meta.block.open.asciidoc
        - meta_content_scope: meta.block.open.content.asciidoc
        - match: ^\-\-\s*$\n?
          scope: constant.delimiter.block.open.end.asciidoc
          pop: true
        # @NOTE ORIGIN: Might need to check on these includes:
        # - include: lists
        - include: block_comment
        # - include: block_listing
        - include: block_pass
        - include: lines
        - include: inline
        # - include: characters

  # IMPORTANT: This element was REMANED by @bsmith-n4! In the original:
  #
  #    '0': {name: constant.delimiter.block.open.begin.asciidoc}
  #  end: ^\-\-\s*$\n?
  #  endCaptures:
  #    '0': {name: constant.delimiter.block.open.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_open:
  #   comment: |
  #     Examples:
  #       --
  #       Lorem ipsum
  #       --
  #     Note: Might need to check on these includes.
  #   name: meta.block.open.asciidoc
  #   contentName: meta.block.open.content.asciidoc
  #   begin: ^\-\-\s*$\n?
  #   beginCaptures:
  #     '0': {name: markup.underline.block.open.begin.asciidoc}  # <- RENAMED by @bsmith-n4
  #   end: ^\-\-\s*$\n?
  #   endCaptures:
  #     '0': {name: markup.underline.block.open.begin.asciidoc}  # <- RENAMED by @bsmith-n4
  #   - include: lists
  #   - include: block_comment
  #   - include: block_listing
  #   - include: block_pass
  #   - include: lines
  #   - include: inline
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #############
  # PASS BLOCKS
  #############

  block_pass:
    - match: ^(\+{4,})\s*$\n?
      scope: constant.delimiter.block.passthrough.begin.asciidoc
      push:
        - meta_scope: meta.embedded.block.passthrough.asciidoc
        - meta_content_scope: text.xml.block.passthrough.content.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.block.passthrough.end.asciidoc
          pop: true
      # - include: text.xml

  # IMPORTANT: This element was REMANED by @bsmith-n4! In the original:
  #
  #   '0': {name: constant.delimiter.block.passthrough.begin.asciidoc}
  # end: ^\1\s*$\n?
  # endCaptures:
  #   '0': {name: constant.delimiter.block.passthrough.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_pass:
  #   name: meta.embedded.block.passthrough.asciidoc
  #   contentName: text.xml.block.passthrough.content.asciidoc
  #   begin: ^(\+{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: markup.underline.block.passthrough.begin.asciidoc}  # <- RENAMED by @bsmith-n4
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: markup.underline.block.passthrough.end.asciidoc}    # <- RENAMED by @bsmith-n4
  #   - include: text.xml
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##############
  # QUOTE BLOCKS
  ##############
  # Examples:
  #   ____
  #   Lorem ipsum
  #   ____

  block_quote:
    - match: ^(_{4,})\s*$\n?
      scope: constant.delimiter.block.quote.begin.asciidoc
      push:
        - meta_scope: meta.block.quote.content.asciidoc
        - meta_content_scope: markup.quote.block.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.block.quote.end.asciidoc
          pop: true
        - include: lines
        - include: inline
        # - include: characters

    # name: markup.quote.block.asciidoc
    # contentName: meta.block.quote.content.asciidoc
    # begin: ^(_{4,})\s*$\n?
    # beginCaptures:
    #   '0': {name: constant.delimiter.block.quote.begin.asciidoc}
    # end: ^\1\s*$\n?
    # endCaptures:
    #   '0': {name: constant.delimiter.block.quote.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_quote:
  #   comment: >
  #     Examples:
  #       ____
  #       Lorem ipsum
  #       ____
  #
  #     Note: Might need to add more includes, but these are the ones that arise
  #     for me in practice.
  #   name: markup.quote.block.asciidoc
  #   contentName: meta.block.quote.content.asciidoc
  #   begin: ^(_{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: constant.delimiter.block.quote.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.block.quote.end.asciidoc}
  #   - include: lines
  #   - include: inline
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #################
  # SIDEBAR BLOCKS
  #################
  # Examples:
  #   ****
  #   Lorem ipsum
  #   ****

  block_sidebar:
    - match: ^(\*{4,})\s*$\n?
      scope: constant.delimiter.block.sidebar.begin.asciidoc
      push:
        - meta_scope: meta.block.sidebar.content.asciidoc
        - meta_content_scope: string.quoted.block.sidebar.asciidoc
        - match: ^\1\s*$\n?
          scope: constant.delimiter.block.sidebar.end.asciidoc
          pop: true
        # - include: lists
        - include: block_comment
        - include: block_listing
        - include: lines
        - include: inline
        # - include: characters

    # name: string.quoted.block.sidebar.asciidoc
    # contentName: meta.block.sidebar.content.asciidoc
    # begin: ^(\*{4,})\s*$\n?
    # beginCaptures:
    #   '0': {name: constant.delimiter.block.sidebar.begin.asciidoc}
    # end: ^\1\s*$\n?
    # endCaptures:
    #   '0': {name: constant.delimiter.block.sidebar.end.asciidoc}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_sidebar:
  #   comment: |
  #     Examples:
  #       ****
  #       Lorem ipsum
  #       ****
  #
  #     Note: Might need to add more includes, but these are the ones that arise
  #     for me in practice.
  #   name: string.quoted.block.sidebar.asciidoc
  #   contentName: meta.block.sidebar.content.asciidoc
  #   begin: ^(\*{4,})\s*$\n?
  #   beginCaptures:
  #     '0': {name: constant.delimiter.block.sidebar.begin.asciidoc}
  #   end: ^\1\s*$\n?
  #   endCaptures:
  #     '0': {name: constant.delimiter.block.sidebar.end.asciidoc}
  #   - include: lists
  #   - include: block_comment
  #   - include: block_listing
  #   - include: lines
  #   - include: inline
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

# -------------------------------------
# @NOTE: Was commented out in original!
# -------------------------------------
#  #block_paragraph:
#  #  comment: |
#  #    TODO
#  #  name: meta.paragraph.asciidoc
#  #  contentName: constant.character
#  #  begin: ^(?=\S)(?![\/|=\-_\.*`]{2,}(?=\s*$))(?!\.\S+)
#  #  end: ^(?:\s*$|(?=[ ]{,3}>.))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[\t]*\n

  #################
  # INLINE CALLOUTS
  #################
  # Callout label
  #
  # Examples:
  #   <1>
  #   <42>

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # inline_callout:
  #   comment: |
  #     Callout label
  #
  #     Examples:
  #       <1>
  #       <42>
  #   name: constant.other.callout.asciidoc
  #   match: (?<!\\)(<)\d+(>)
  #   captures:
  #     '1': {name: punctuation.definition.callout.begin.asciidoc}
  #     '2': {name: punctuation.definition.callout.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<


#-----------------------------------------------------------------------------#
#                             C H A R A C T E R S                             #
#-----------------------------------------------------------------------------#

  # characters:
  #   - include: attribute_reference
  #   - include: entity_number
  #   - include: entity_name
  #   - include: escape
  #   - include: replacement
  #   - include: macro_pass
  #   - include: macro
  #   - include: xref
  #   - include: biblio_anchor
  #   - include: indexterm_triple
  #   - include: indexterm_double

  #####################
  # ATTRIBUTE REFERENCE
  #####################
  # Examples:
  #   {my-attribute}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # attribute_reference:
  #   comment: |
  #     Examples:
  #       {my-attribute}
  #   name: variable.other
  #   match: ({)([A-Za-z0-9_][A-Za-z0-9_-]*)(})
  #   captures:
  #     '1': {name: constant.character.attributes.reference.begin.asciidoc}
  #     '2': {name: support.variable.attribute.asciidoc}
  #     '3': {name: constant.character.attributes.reference.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ################
  # BIBLIO ANCHORS
  ################
  # Bibliography anchor
  # Examples:
  #   [[[Lorem ipsum]]]

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # biblio_anchor:
  #   comment: |
  #     Bibliography anchor
  #
  #     Examples:
  #       [[[Lorem ipsum]]]
  #   name: storage.type.reference.biblioanchor.asciidoc
  #   match: (?<!\[)(\[\[\[).*?(\]\]\])(?!\])
  #   captures:
  #     '1': {name: punctuation.definition.biblioanchor.begin.asciidoc}
  #     '2': {name: punctuation.definition.biblioanchor.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #################
  # NUMBER ENTITIES
  #################
  # Numeric character reference
  # Examples:
  #   &#x278a;
  #   &#182;

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # entity_number:
  #   comment: |
  #     Numeric character reference
  #
  #     Examples:
  #       &#x278a;
  #       &#182;
  #   name: constant.character.entity.asciidoc
  #   match: (?<!\\)&#(x?[0-9a-fA-f]{2,4});
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #########
  # ESCAPES
  #########
  # List of special characters that may be escaped.

  # @NOTE (IN ORIGINAL): I do not really know if this is a good list, adopted
  #                      wholesale from original bundle.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # escape:
  #   comment: |
  #     List of special characters that may be escaped.
  #
  #     Note: I do not really know if this is a good list, adopted wholesale from
  #     original bundle.
  #   name: constant.character.escape.asciidoc
  #   match: \\(?=[-`*_#+.!(){}\[\]\\>:])
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###################
  # DOUBLE INDEXTERMS
  ###################
  # Double parenthesis indexterm.
  # Examples:
  #   ((Arthur))

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # indexterm_double:
  #   comment: |
  #     Double parenthesis indexterm.
  #
  #     Examples:
  #       ((Arthur))
  #   name: variable.other.indexterm.double.asciidoc
  #   match: (?<!\()(\({2})([^\(\s].*?)(\){2})(?!\))
  #   captures:
  #     '1': {name: constant.character.indexterm.double.begin.asciidoc}
  #     '3': {name: constant.character.indexterm.double.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###################
  # TRIPLE INDEXTERMS
  ###################
  # Triple parenthesis indexterm.
  # Examples:
  #   (((Sword, Broadsword, Excalibur)))

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # indexterm_triple:
  #   comment: |
  #     Triple parenthesis indexterm.
  #
  #     Examples:
  #       (((Sword, Broadsword, Excalibur)))
  #   name: variable.other.indexterm.triple.asciidoc
  #   match: (?<!\()(\({3})([^\(].*?)(\){3})(?!\))
  #   captures:
  #     '1': {name: constant.character.indexterm.triple.begin.asciidoc}
  #     '3': {name: constant.character.indexterm.triple.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ########
  # MACROS
  ########

  # @NOTE (ORIGINAL): There are other macro notations, but I match only those
  #                   that end in square brackets.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # macro:
  #   comment: |
  #     Note: There are other macro notations, but I match only those that end in
  #     square brackets.
  #   name: meta.macro.asciidoc
  #   match: |-
  #     (?x)
  #     (?:
  #       ((?:https?|mailto|ftp|file)  # specify separately so we can mark them as links that TextMate opens
  #       ?:{1}  # inline only
  #       \S*)   # (others such as image are partial URLs and/or TextMate cannot handle them)
  #     |
  #       (([a-zA-Z0-9][a-zA-Z0-9_]*)
  #       (:{1,2})
  #       (\S*))
  #     )
  #     (?:(\[)([^\]]*)(\]))
  #   captures:
  #     '1': {name: markup.underline.link.macro.asciidoc}
  #     '3': {name: keyword.control.name.macro.asciidoc}
  #     '4': {name: constant.character.separator.macro.asciidoc}
  #     '5': {name: markup.underline.target.macro.asciidoc}
  #     '6': {name: constant.character.attributes.macro.begin.asciidoc}
  #     '7': {name: variable.parameter.attributes.macro.asciidoc}
  #     '8': {name: constant.character.attributes.macro.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ############
  # PASS MACRO
  ############
  # Passthrough macro
  # Examples:
  #   pass:[Lorem ipsum]
  #   pass::[Lorem ipsum]

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # macro_pass:
  #   comment: |
  #     Passthrough macro
  #
  #     Examples:
  #       pass:[Lorem ipsum]
  #       pass::[Lorem ipsum]
  #   name: meta.macro.pass.asciidoc
  #   contentName: variable.parameter.attributes.macro.pass.asciidoc
  #   begin: |-
  #     (?x)
  #     (pass)
  #     (:{1,2})
  #     (\S*)
  #     (\[)(?=[^\]]*\])
  #   captures:
  #     '1': {name: keyword.control.name.macro.pass.asciidoc}
  #     '2': {name: constant.character.separator.macro.asciidoc}
  #     '3': {name: markup.underline.target.macro.asciidoc}
  #     '4': {name: constant.character.attributes.macro.begin.asciidoc}
  #   end: '\]'
  #   endCaptures:
  #     '0': {name: constant.character.attributes.macro.end.asciidoc}
  #   - include: text.xml
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##############
  # REPLACEMENTS
  ##############
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  #  replacement:
  #    name: constant.character.replacement.asciidoc
  #    match: |-
  #      (?x)
  #      (?<!\\)  # must not be escaped
  #      (
  #        \(C\)
  #        | \(TM\)
  #        | \(R\)
  #        | ((?<!\-)\-\-(?!\-))    # exactly two, and even this may not rule out all that I want to
  #        | ((?<!\.)\.\.\.(?!\.))  # exactly three
  #        | \->
  #        | <\-
  #        | =>
  #        | <=
  #      )
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ################
  # NAMED ENTITIES
  ################
  # Character entity reference
  # Examples:
  #   &nbsp;
  #   &sup2;

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # entity_name:
  #   comment: |
  #     Character entity reference
  #
  #     Examples:
  #       &nbsp;
  #       &sup2;
  #   name: constant.character.entity.xml.asciidoc
  #   match: (?<!\\)&([a-zA-Z][a-zA-Z0-9]*);
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #######
  # XREFS
  #######
  # Internal cross-reference
  # Examples:
  #   <<lorem>>
  #   <<lorem, see here>>

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # xref:
  #   comment: |
  #     Internal cross-reference
  #
  #     Examples:
  #       <<lorem>>
  #       <<lorem, see here>>
  #   name: meta.xref.asciidoc
  #   match: (?<!<)(<<)([^,]*?)((,\s*)(.*?))?(>>)(?!<)
  #   captures:
  #     '1': {name: constant.character.xref.begin.asciidoc}
  #     '2': {name: markup.underline.term.xref.asciidoc}
  #     '5': {name: variable.parameter.xref.asciidoc}
  #     '6': {name: constant.character.xref.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

#*******************************************************************************
#                                                                              *
#                        I N L I N E    E L E M E N T S                        *
#                                                                              *
#*******************************************************************************

  inline:
  #   - include: passthrough
    - include: strong_double
    - include: emphasis_double
    - include: monospaced_double
  #   - include: mark_double
    - include: strong
    - include: emphasis
    - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript


  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # inline:
  #   - include: passthrough
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ######################
  # STRONG UNCONSTRAINED
  ######################
  # Was: "STRONG DOUBLE"
  # Strong (bold) text (unconstrained variant).
  # Examples:
  #   Lo**re**m **ipsum dolor**.
  #   Lo[red]**re**m

  strong_double:
    - match: |
        (?x)
        (\[[^\]]*?\])?  # might start with an attribute list
        (?<!\\)         # must not be preceded by escape
        (\*\*)
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.bold.double.begin.asciidoc
      push: inside_strong_double

  inside_strong_double:
    - meta_content_scope: markup.bold.double.asciidoc
    - meta_scope: meta.boldinner.double.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: \*\*
      scope: punctuation.definition.bold.double.end.asciidoc
      pop: true
      #   - include: emphasis_double
      #   - include: monospaced_double
      #   - include: mark_double
      #   - include: emphasis
      #   - include: monospaced
      #   - include: mark
      #   - include: superscript
      #   - include: subscript
      #   - include: characters


  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # strong_double:
  #   comment: |
  #     Strong (bold) text (unconstrained variant).
  #
  #     Examples:
  #       Lo**re**m **ipsum dolor**.
  #       Lo[red]**re**m
  #   name: markup.bold.double.asciidoc
  #   contentName: meta.boldinner.double.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with an attribute list
  #     (?<!\\)         # must not be preceded by escape
  #     (\*\*)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.bold.double.begin.asciidoc}
  #   end: '\*\*'
  #   endCaptures:
  #     '0': {name: punctuation.definition.bold.double.end.asciidoc}
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: emphasis
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #####################
  # STRONG CONSTRAINED
  #####################
  # Was: "STRONG"
  # Strong (bold) text (unconstrained variant).
  # Examples:
  #   Lo**re**m **ipsum dolor**.
  #   Lo[red]**re**m
  strong:
    - match: |
        (?x)
        (\[[^\]]*?\])?      # might start with an attributes list
        (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
        (\*)(?=\S)          # delimiter star that must be followed by a nonspace character
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.bold.single.begin.asciidoc
      push: inside_strong

  inside_strong:
    - meta_content_scope: markup.bold.single.asciidoc
    - meta_scope: meta.boldinner.single.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: |
        (?x)
        (?<=\S)(\*)       # delimiter star that must be preceded by a nonspace character
        (?!\w)            # ...and followed by a nonword character
      scope: punctuation.definition.bold.single.end.asciidoc
      pop: true
      #   - include: emphasis_double
      #   - include: monospaced_double
      #   - include: mark_double
      #   - include: emphasis
      #   - include: monospaced
      #   - include: mark
      #   - include: superscript
      #   - include: subscript
      #   - include: characters

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # strong:
  #   comment: |
  #     Strong (bold) text (constrained variant).
  #
  #     Examples:
  #       *Lorem ipsum* dolor
  #       [red]*Lorem ipsum* dolor
  #   name: markup.bold.single.asciidoc
  #   contentName: meta.boldinner.single.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?      # might start with an attributes list
  #     (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
  #     (\*)(?=\S)          # delimiter star that must be followed by a nonspace character
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.bold.single.begin.asciidoc}
  #   end: |-
  #     (?x)
  #     (?<=\S)(\*)       # delimiter star that must be preceded by a nonspace character
  #     (?!\w)            # ...and followed by a nonword character
  #   endCaptures:
  #     '1': {name: punctuation.definition.bold.single.end.asciidoc}
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: emphasis
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<


  ########################
  # EMPHASIS UNCONSTRAINED
  ########################
  # Was: "EMPHASIS DOUBLE"
  # Emphasized (italic) text (unconstrained variant).
  # Examples:
  #   Lo__re__m __ipsum dolor__.
  #   Lo[red]__re__m

  emphasis_double:
    - match: |
        (?x)
        (\[[^\]]*?\])?  # might start with attribute list
        (?<!\\)         # must not be preceded by escape
        (__)
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.italic.double.begin.asciidoc
      push: inside_emphasis_double

  inside_emphasis_double:
    - meta_content_scope: markup.italic.double.asciidoc
    - meta_scope: meta.italicinner.double.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: '__'
      scope: punctuation.definition.italic.double.end.asciidoc
      pop: true
    #   - include: strong_double
    #   - include: monospaced_double
    #   - include: mark_double
    #   - include: strong
    #   - include: monospaced
    #   - include: mark
    #   - include: superscript
    #   - include: subscript
    #   - include: characters


  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # emphasis_double:
  #   comment: |
  #     Emphasized (italic) text (unconstrained variant).
  #
  #     Examples:
  #       Lo__re__m __ipsum dolor__.
  #       Lo[red]__re__m
  #   name: markup.italic.double.asciidoc
  #   contentName: meta.italicinner.double.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with attribute list
  #     (?<!\\)         # must not be preceded by escape
  #     (__)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.italic.double.begin.asciidoc}
  #   end: '__'
  #   endCaptures:
  #     '0': {name: punctuation.definition.italic.double.end.asciidoc}
  #   - include: strong_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: strong
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ######################
  # EMPHASIS CONSTRAINED
  ######################
  # Was: "EMPHASIS"
  # Emphasized (italic) text (constrained variant).
  #
  # Examples:
  #   _Lorem ipsum_ dolor
  #   [red]_Lorem ipsum_ dolor

  emphasis:
    - match: |
        (?x)
        (\[[^\]]*?\])?      # might be preceded by an attributes list
        (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
        (_)(?=\S)           # delimiter underscore that must be followed by a nonspace character
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.italic.single.begin.asciidoc
      push: inside_emphasis

  inside_emphasis:
    - meta_content_scope: markup.italic.single.asciidoc
    - meta_scope: meta.italicinner.single.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: |
        (?x)
        (?<=\S)(_)        # delimiter underscore that must be preceded by a nonspace character
        (?!\w)            # ...and followed by a nonword character
      scope: punctuation.definition.italic.single.end.asciidoc
      pop: true
    # - include: strong_double
    # - include: monospaced_double
    # - include: mark_double
    # - include: strong
    # - include: monospaced
    # - include: mark
    # - include: superscript
    # - include: subscript
    # - include: characters

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # emphasis:
  #   comment: |
  #     Emphasized (italic) text (constrained variant).
  #
  #     Examples:
  #       _Lorem ipsum_ dolor
  #       [red]_Lorem ipsum_ dolor
  #   name: markup.italic.single.asciidoc
  #   contentName: meta.italicinner.single.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?      # might be preceded by an attributes list
  #     (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
  #     (_)(?=\S)           # delimiter underscore that must be followed by a nonspace character
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.italic.single.begin.asciidoc}
  #   end: |-
  #     (?x)
  #     (?<=\S)(_)        # delimiter underscore that must be preceded by a nonspace character
  #     (?!\w)            # ...and followed by a nonword character
  #   endCaptures:
  #     '1': {name: punctuation.definition.italic.single.end.asciidoc}
  #   - include: strong_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: strong
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<



  ##########################
  # MONOSPACED UNCONSTRAINED
  ##########################
  # Was: "MONOSPACED DOUBLE"
  # Monospaced text (unconstrained variant).
  #
  # Examples:
  #   Lo``re``m ``ipsum dolor``.
  #   Lo[red]``re``m

  monospaced_double:
    - match: |
        (?x)
        (\[[^\]]*?\])?  # might start with attribute list
        (?<!\\)         # must not be preceded by escape
        (``)
        (?!"|')         # Avoid false positive for closing smart typography
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.literal.double.begin.asciidoc
      push: inside_monospaced_double

  inside_monospaced_double:
    - meta_content_scope: string.other.literal.double.asciidoc
    - meta_scope: meta.literalinner.double.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: '``'
      scope: punctuation.definition.literal.double.end.asciidoc
      pop: true
    # - include: strong_double
    # - include: emphasis_double
    # - include: mark_double
    # - include: strong
    # - include: emphasis
    # - include: mark
    # - include: superscript
    # - include: subscript
    # - include: characters

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # monospaced_double:
  #   comment: |
  #     Monospaced text (unconstrained variant).
  #
  #     Examples:
  #       Lo``re``m ``ipsum dolor``.
  #       Lo[red]``re``m
  #   name: string.other.literal.double.asciidoc
  #   contentName: meta.literalinner.double.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with attribute list
  #     (?<!\\)         # must not be preceded by escape
  #     (``)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.literal.double.begin.asciidoc}
  #   end: '``'
  #   endCaptures:
  #     '0': {name: punctuation.definition.literal.double.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<


  ########################
  # MONOSPACED CONSTRAINED
  ########################
  # Was: "MONOSPACED"
  # Monospaced text (constrained variant).
  #
  # Examples:
  #   `Lorem ipsum` dolor
  #   [red]`Lorem ipsum` dolor

  monospaced:
    # False positive: typographic quotes followed by single backtick:
    - match: (["']`)(`(?!`))?
      captures:
        1: punctuation.definition.string.begin.asciidoc
      pop: true
    # False positive: closing typographic quotes:
    - match: (`["'])
      captures:
        1: punctuation.definition.string.end.asciidoc
      pop: true
    # Capture real monospaced formatting:
    - match: |
        (?x)
        (\[[^\]]*?\])?      # might start with attributes list
        (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
        (`)(?=\S)           # delimiter backtick that must be followed by a nonspace character
      captures:
        1: support.variable.attributelist.asciidoc
        2: punctuation.definition.literal.single.begin.asciidoc
      push: inside_monospaced

  inside_monospaced:
    - meta_content_scope: string.other.literal.single.asciidoc
    - meta_scope: meta.literalinner.single.asciidoc
    - include: error_on_empty_line
    - include: line_comment
    - match: |
        (?x)
        (?<=\S)(`)        # delimiter backtick that must be preceded by a nonspace character
        (?!\w)            # ...and followed by a nonword character
      scope: punctuation.definition.literal.single.end.asciidoc
      pop: true
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters


  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # monospaced:
  #   comment: |
  #     Monospaced text (constrained variant).
  #
  #     Examples:
  #       `Lorem ipsum` dolor
  #       [red]`Lorem ipsum` dolor
  #   name: string.other.literal.single.asciidoc
  #   contentName: meta.literalinner.single.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?      # might start with attributes list
  #     (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
  #     (`)(?=\S)           # delimiter backtick that must be followed by a nonspace character
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.literal.single.begin.asciidoc}
  #   end: |-
  #     (?x)
  #     (?<=\S)(`)        # delimiter backtick that must be preceded by a nonspace character
  #     (?!\w)            # ...and followed by a nonword character
  #   endCaptures:
  #     '1': {name: punctuation.definition.literal.single.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: mark
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<



  #############
  # PASSTHROUGH
  #############
  # Inline triple-plus and double dolar passthrough.
  # Examples:
  #   Lo+++re++++m +++ipsum dolor+++.
  #   Lo$$re$$m $$ipsum dolor$$.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # passthrough:
  #   comment: |
  #     Inline triple-plus and double dolar passthrough.
  #
  #     Examples:
  #       Lo+++re++++m +++ipsum dolor+++.
  #       Lo$$re$$m $$ipsum dolor$$.
  #
  #     Note: Must be dead first among the inlines, so as to take priority.
  #   name: meta.passthru.inline.asciidoc
  #   contentName: variable.parameter.passthruinner.asciidoc
  #   begin: (\+\+\+|\$\$)
  #   beginCaptures:
  #     '1': {name: constant.character.passthru.begin.asciidoc}
  #   end: '\1'
  #   endCaptures:
  #     '0': {name: constant.character.passthru.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<


  ####################
  # MARK UNCONSTRAINED
  ####################
  # Was: "MARK DOUBLE"
  # Marked text (unconstrained variant).
  # Examples:
  #   Lo##re##m ##ipsum dolor##.
  #   Lo[red]##re##m

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # mark_double:
  #   comment: |
  #     Marked text (unconstrained variant).
  #
  #     Examples:
  #       Lo##re##m ##ipsum dolor##.
  #       Lo[red]##re##m
  #   name: string.other.unquoted.double.asciidoc
  #   contentName: string.unquoted.unquotedinner.double.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with an attribute list (indeed, that is its purpose)
  #     (?<!\\)         # must not be preceded by escape
  #     (\#\#)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.string.unquoted.double.begin.asciidoc}
  #   end: '\#\#'
  #   endCaptures:
  #     '0': {name: punctuation.definition.string.unquoted.double.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: strong
  #   - include: emphasis
  #   - include: monospaced
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##################
  # MARK CONSTRAINED
  ##################
  # Was: "MARK"
  # Marked text (constrained variant).
  # Examples:
  #   #Lorem ipsum# dolor
  #   [red]#Lorem ipsum# dolor

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # mark:
  #   comment: |
  #     Marked text (constrained variant).
  #
  #     Examples:
  #       #Lorem ipsum# dolor
  #       [red]#Lorem ipsum# dolor
  #   name: string.other.unquoted.single.asciidoc
  #   contentName: string.unquoted.unquotedinner.single.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?      # might start with attribute list (darned well better or why are we here)
  #     (?<=^|\W)(?<!\\|})  # must be preceded by nonword character, and not by escape or } (attribute)
  #     (\#)(?=\S)          # delimiter hash that must be followed by a nonspace character
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.string.unquoted.single.begin.asciidoc}
  #   end: |-
  #     (?x)
  #     (?<=\S)(\#)       # delimiter hash that must be preceded by a nonspace character
  #     (?!\w)            # ...and followed by a nonword character
  #   endCaptures:
  #     '1': {name: punctuation.definition.string.unquoted.single.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: strong
  #   - include: emphasis
  #   - include: monospaced
  #   - include: superscript
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###########
  # SUBSCRIPT
  ###########
  # Subscript text.
  # Examples:
  #   E=mc^2^
  #   E=mc[red]^2^

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # subscript:
  #   comment: |
  #     Subscript text.
  #
  #     Examples:
  #       E=mc^2^
  #       E=mc[red]^2^
  #   name: string.other.subscript.asciidoc
  #   contentName: meta.subscriptinner.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with attribute list
  #     (?<!\\)         # must not be preceded by escape
  #     (~)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.string.subscript.begin.asciidoc}
  #   end: '~'
  #   endCaptures:
  #     '0': {name: punctuation.definition.string.subscript.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: monospaced
  #   - include: mark
  #   - include: superscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #############
  # SUPERSCRIPT
  #############
  # Superscript text.
  # Examples:
  #   H~2~O
  #   H[red]~2~O

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # superscript:
  #   comment: |
  #     Superscript text.
  #
  #     Examples:
  #       H~2~O
  #       H[red]~2~O
  #   name: string.other.superscript.asciidoc
  #   contentName: meta.superscriptinner.asciidoc
  #   begin: |-
  #     (?x)
  #     (\[[^\]]*?\])?  # might start with attribute list
  #     (?<!\\)         # no preceding escape
  #     (\^)
  #   beginCaptures:
  #     '1': {name: support.variable.attributelist.asciidoc}
  #     '2': {name: punctuation.definition.string.superscript.begin.asciidoc}
  #   end: '^'
  #   endCaptures:
  #     '0': {name: punctuation.definition.string.superscript.end.asciidoc}
  #   - include: strong_double
  #   - include: emphasis_double
  #   - include: monospaced_double
  #   - include: mark_double
  #   - include: strong
  #   - include: emphasis
  #   - include: monospaced
  #   - include: mark
  #   - include: subscript
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

#*******************************************************************************
#                                                                              *
#                   S I N G L E - L I N E    E L E M E N T S                   *
#                                                                              *
#*******************************************************************************

  lines:
    - include: line_comment
  #   - include: list_continuation
  #   - include: inline_break
  #   - include: block_page_break
  #   - include: block_thematic_break
  #   - include: block_title
  #   - include: block_id
  #   - include: block_req                              # <- ADDED by @bsmith-n4
  #   - include: section_template
  #   - include: attribute_list_line
  #   - include: attribute_entry

  ######################
  # SINGLE-LINE COMMENTS
  ######################
  # Inline comment. (?)
  # Examples:
  #   // This is just a comment!
  line_comment:
    - match: ^(//)([^/\n].*|)$\n?
      scope: comment.line.double-slash.asciidoc
      captures:
        1: punctuation.definition.comment.line.asciidoc
        2: meta.line.comment.content.asciidoc

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # inline_comment:
  #   comment: |
  #     Inline comment.
  #
  #     Examples:
  #       // This is just a comment!
  #   name: comment.line.double-slash.asciidoc
  #   match: ^(//)([^/\n].*|)$\n?
  #   captures:
  #     '1': {name: punctuation.definition.comment.line.asciidoc}
  #     '2': {name: meta.line.comment.content.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #################
  # ATTRIBUTE ENTRY
  #################
  # An attribute entry.
  # Examples:
  #   :my-attribute: value
  #   :sectnums!:
  #   :!sectnums:

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # attribute_entry:
  #   comment: |
  #     An attribute entry.
  #
  #     Examples:
  #       :my-attribute: value
  #       :sectnums!:
  #       :!sectnums:
  #   name: meta.attributeentry.asciidoc
  #   contentName: meta.attributeentry.value.asciidoc
  #   begin: |-
  #     (?x)
  #     ^(:)                          # opening delimiter
  #     (!)?                          # bang symbol (unset attribute)
  #     ([A-Za-z0-9_][A-Za-z0-9_-]*)  # attribute name
  #     (!)?                          # bang symbol (unset attribute)
  #     (:)                           # closing delimiter
  #     (?:\s+|(?=$))
  #   beginCaptures:
  #     '1': {name: punctuation.definition.attributeentry.attrname.begin.asciidoc}
  #     '2': {name: punctuation.definition.attributeentry.unset.asciidoc}
  #     '3': {name: support.variable.attribute.asciidoc}
  #     '4': {name: punctuation.definition.attributeentry.unset.asciidoc}
  #     '5': {name: punctuation.definition.attributeentry.attrname.end.asciidoc}
  #   end: $\n?
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #####################
  # ATTRIBUTE LIST LINE
  #####################
  # Attribute list as paragraph: single brackets. No need for special
  # treatment of escape; follows literal block, section template as being a
  # more general regex.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # attribute_list_line:
  #   comment: >
  #     Attribute list as paragraph: single brackets. No need for special
  #     treatment of escape; follows literal block, section template as being a
  #     more general regex.
  #   name: support.variable.attributelist.asciidoc
  #   match: ^(\[)[^\[\]]*(\])\s*$\n?
  #   captures:
  #     '1': {name: punctuation.definition.attributelistline.begin.asciidoc}
  #     '2': {name: punctuation.definition.attributelistline.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  #############
  # BLOCK TITLE
  #############
  # Title of a block. Exludes custom block titles for better
  # scoping / preventing overlap.
  # Examples:
  #   .My title
  #   Lorem ipsum dolor.

  # IMPORTANT: This element differs in @bsmith-n4 and original!

  # >>>>>>>> bsmith-n4 >>>>>>>>
  # block_title:
  #   comment: |
  #     Title of a block. Exludes custom block titles for better
  #     scoping / preventing overlap.
  #
  #     Examples:
  #       .My title
  #       Lorem ipsum dolor.
  #   name: markup.heading.block.asciidoc
  #   match: ^(\.)\w.*$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>> Asciidoctor >>>>>>>
  # block_title:
  #   comment: |
  #     Title of a block.
  #
  #     Examples:
  #       .My title
  #       Lorem ipsum dolor.
  #   name: markup.heading.block.asciidoc
  #   match: ^(\.)\w.*$\n?
  #   captures:
  #     '1': {name: punctuation.definition.blockheading.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##########
  # BLOCK ID
  ##########
  #A block id (i.e. anchor).
  #Examples:
  #  [[myid]]
  #  Lorem ipsum dolor.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_id:
  #   comment: |
  #     A block id (i.e. anchor).
  #
  #     Examples:
  #       [[myid]]
  #       Lorem ipsum dolor.
  #   name: meta.tag.blockid.asciidoc
  #   match: ^(\[\[)([^\[].*)(\]\])\s*$\n?
  #   captures:
  #     '1': {name: punctuation.definition.blockid.begin.asciidoc}
  #     '2': {name: markup.underline.blockid.id.asciidoc}
  #     '3': {name: punctuation.definition.blockid.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###########
  # BLOCK REQ
  ###########
  # A requirement id (i.e. anchor).
  # Examples:
  #   [req,id=ROPR1234,version=1]
  #   Lorem ipsum dolor.

  # IMPORTANT: This element was ADDED by @bsmith-n4!

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>                         # <- ADDED by @bsmith-n4
  # block_req:
  #   comment: |
  #     A requirement id (i.e. anchor).
  #     Examples:
  #       [req,id=ROPR1234,version=1]
  #       Lorem ipsum dolor.
  #   name: meta.tag.blockid.req.asciidoc
  #   match: (\[req,(\s+)?id=)(.+?)(,(\s+)?version=)([0-9])(\])
  #   captures:
  #     '1': {name: markup.underline.block.id.asciidoc}
  #     '3': {name: variable.parameter.reqid.id.asciidoc}
  #     '4': {name: markup.underline.block.version.asciidoc}
  #     '6': {name: variable.parameter.reqversion.id.asciidoc}
  #     '7': {name: markup.underline.block.id.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<


  ##############
  # INLINE BREAK
  ##############
  # Line hard break with a plus sign (+).
  # Examples:
  #   Rubies are red, +
  #   Topazes are blue.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # inline_break:
  #   comment: |
  #     Line hard break with a plus sign (+).
  #
  #     Examples:
  #       Rubies are red, +
  #       Topazes are blue.
  #   name: constant.linebreak.asciidoc
  #   match: (?<=\s)\+$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###################
  # LIST CONTINUATION
  ###################
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # list_continuation:
  #   name: constant.listcontinuation.asciidoc
  #   match: ^\+\s*$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##################
  # BLOCK PAGE BREAK
  ##################
  # A page break.
  # Examples:
  #   <<<
  #   <<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_page_break:
  #   comment: |
  #     A page break.
  #
  #     Examples:
  #       <<<
  #       <<<<<
  #   name: meta.separator.pagebreak.asciidoc
  #   match: ^<{3,}$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ######################
  # BLOCK THEMATIC BREAK
  ######################
  # A thematic break (aka horizontal rule).
  # Examples:
  #   '''
  #   ''''''

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_thematic_break:
  #   comment: |
  #     A thematic break (aka horizontal rule).
  #
  #     Examples:
  #       '''
  #       ''''''
  #   name: meta.separator.ruler.asciidoc
  #   match: ^'{3,}$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##################
  # SECTION TEMPLATE
  ##################
  # Fixed list of known template names

  # IMPORTANT: This element differs in @bsmith-n4 and original!
  #
  # section_template:
  #   comment: fixed list of known template names
  #   name: variable.parameter.sectiontemplate.asciidoc
  #   match: |-



  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # section_template:
  #   comment: fixed list of known template names
  #   name: variable.parameter.sectiontemplate.asciidoc
  #   match: |                       # <- CHANGED by @bsmith-n4 (was: match: |-)
  #     (?x)^
  #     (\[)  # in square brackets
  #     (template\s*=\s*)?(")?  # might start with template-equals and might have template name in quotes
  #     (
  #     sect\d|abstract|preface|colophon|dedication|glossary|bibliography|synopsis|appendix|index # fixed list of known templates
  #     )
  #     (".*(\])|(\]))  # either close the quote (and perhaps go on) and close the bracket, or close the bracket immediately
  #     \s*$\n?
  #   captures:
  #     '1': {name: punctuation.definition.sectiontemplate.begin.asciidoc}
  #     '4': {name: meta.tag.sectiontemplate.asciidoc}
  #     '6': {name: punctuation.definition.sectiontemplate.end.asciidoc}
  #     '7': {name: punctuation.definition.sectiontemplate.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

#*******************************************************************************
#                                                                              *
#                                  L I S T S                                   *
#                                                                              *
#*******************************************************************************

  # lists:
  #   comment: >
  #     My strategy for lists (and similar) is not to try to treat entire
  #     paragraphs as lists, but only call out the opening.
  #   - include: block_admonition_label
  #   - include: ulist_item_marker
  #   - include: olist_item_marker
  #   - include: dlist_item_label
  #   - include: colist_item_marker

  ########################
  # ADMONITION BLOCK LABEL
  ########################
  # Label of an admonition block.
  # Examples:
  #   NOTE: This is a admonition block.
  #   WARNING:  Be aware of them!

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # block_admonition_label:
  #   comment: |
  #     Label of an admonition block.
  #
  #     Examples:
  #       NOTE: This is a admonition block.
  #       WARNING:  Be aware of them!
  #   name: support.constant.admonitionword.asciidoc
  #   match: ^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):(?=\s+)
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###################
  # ULIST ITEM MARKER
  ###################
  # Marker of an unordered (bullet) list item.
  # Examples:
  #   * level 1
  #   ** level 2
  #   *** level 3
  #   **** level 4
  #   ***** level 5
  #   - level 1
  #   -- level 2
  #   --- level 3
  #   ---- level 4
  #   ----- level 5

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # ulist_item_marker:
  #   comment: |
  #     Marker of an unordered (bullet) list item.
  #
  #     Examples:
  #       * level 1
  #       ** level 2
  #       *** level 3
  #       **** level 4
  #       ***** level 5
  #       - level 1
  #       -- level 2
  #       --- level 3
  #       ---- level 4
  #       ----- level 5
  #   name: markup.list.bulleted.asciidoc
  #   match: ^(\s*(\-|\*{1,5}))\s+(?=\S)
  #   captures:
  #     '1': {name: string.unquoted.list.bullet.asciidoc}
  #     '2': {name: constant.numeric.list.bullet.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ####################
  # COLIST ITEM MARKER
  ####################
  # Marker of a callout list item.
  # Examples:
  #   <1> a callout
  #   <42> another callout

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # colist_item_marker:
  #   comment: |
  #     Marker of a callout list item.
  #
  #     Examples:
  #       <1> a callout
  #       <42> another callout
  #   name: markup.list.numbered.callout.asciidoc
  #   match: ^(\s*((<)\d+?(>)))\s+(?=\S)
  #   captures:
  #     '1': {name: string.unquoted.list.callout.asciidoc}
  #     '2': {name: constant.numeric.callout.asciidoc}
  #     '3': {name: punctuation.definition.calloutlistnumber.begin.asciidoc}
  #     '4': {name: punctuation.definition.calloutlistnumber.end.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ##################
  # DLIST ITEM LABEL
  ##################
  # Label of a definition (labeled) list item.
  # Examples:
  #   Label level 1:: lorem ipsum
  #   Label level 2::: dolor sit amet
  #   Label level 3:::: consectetur
  #   Label level 1::
  #     lorem ipsum
  #   Another label :: lorem ipsum
  #   Last::label:: dolor sit amet

  # @NOTE (ORIGINAL):
  #     This rule is not strictly correct, because Asciidoctor allows
  #     double colon followed by a space inside a label, i.e. it matches the
  #     *last* double colon, not the first. I don't know how to do that
  #     *effectively.

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # dlist_item_label:
  #   comment: |
  #     Label of a definition (labeled) list item.
  #
  #     Examples:
  #       Label level 1:: lorem ipsum
  #       Label level 2::: dolor sit amet
  #       Label level 3:::: consectetur
  #       Label level 1::
  #         lorem ipsum
  #       Another label :: lorem ipsum
  #       Last::label:: dolor sit amet
  #
  #     Note: This rule is not strictly correct, because Asciidoctor allows
  #     double colon followed by a space inside a label, i.e. it matches the
  #     *last* double colon, not the first. I don't know how to do that
  #     *effectively.
  #   name: markup.list.labeled.asciidoc
  #   contentName: meta.list.label.asciidoc
  #   begin: ^\s*(?=.*:{2,4}(?:\s|$))
  #   end: (:{2,4})(?:\s|$\n?)
  #   endCaptures:
  #     '1': {name: constant.labeledlist.separator.asciidoc}
  #   - include: inline
  #   - include: characters
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  ###################
  # OLIST ITEM MARKER
  ###################
  # Marker of an ordered (numbered) list item.
  # Examples:
  #   . level 1
  #   .. level 2
  #   ... level 3
  #   .... level 4
  #   ..... level 5

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # olist_item_marker:
  #   comment: |
  #     Marker of an ordered (numbered) list item.
  #
  #     Examples:
  #       . level 1
  #       .. level 2
  #       ... level 3
  #       .... level 4
  #       ..... level 5
  #
  #     Note: The space distinguishes it from a block title.
  #   name: markup.list.numbered.dotted.asciidoc
  #   match: ^(\s*(\.{1,5}))\s+(?=\S)
  #   captures:
  #     '1': {name: string.unquoted.list.dotted.asciidoc}
  #     '2': {name: constant.numeric.list.dot.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

# ==============================================================================
#                          S E C T I O N    T I T L E S
# ==============================================================================

# IMPORTANT: All Titles RegExs were tweaked by @bsmith-n4! Basically, every
#            RegEx was tweaked to allow inline code inside the title:
#
#               match: ^(=) (\w.*)$\n?     <-- original
#               match: ^(=) (`?\w.*)$\n?   <-- @bsmith-n4


#     Examples:
#
#       = Document Title (Level 0)
#
#       == Level 1 Section
#
#       === Level 2 Section

  section_titles:
    - include: title_level_5
    - include: title_level_4
    - include: title_level_3
    - include: title_level_2
    - include: title_level_1
    - include: title_level_0

  title_level_0:
    - match: ^(=) (`?\w.*)$\n?
      scope: markup.heading.level.0.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  # match: ^(=) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_0:
  #   name: markup.heading.level.0.asciidoc
  #   match: ^(=) (`?\w.*)$\n?                        # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  title_level_1:
    - match: ^(==) (`?\w.*)$\n?
      scope: markup.heading.level.1.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  #   match: ^(==) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_1:
  #   name: markup.heading.level.1.asciidoc
  #   match: ^(==) (`?\w.*)$\n?                       # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  title_level_2:
    - match: ^(===) (`?\w.*)$\n?
      scope: markup.heading.level.2.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  #   match: ^(===) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_2:
  #   name: markup.heading.level.2.asciidoc
  #   match: ^(===) (`?\w.*)$\n?                      # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  title_level_3:
    - match: ^(====) (`?\w.*)$\n?
      scope: markup.heading.level.3.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  #   match: ^(====) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_3:
  #   name: markup.heading.level.3.asciidoc
  #   match: ^(====) (`?\w.*)$\n?                     # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  title_level_4:
    - match: ^(=====) (`?\w.*)$\n?
      scope: markup.heading.level.4.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  #   match: ^(=====) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_4:
  #   name: markup.heading.level.4.asciidoc
  #   match: ^(=====) (`?\w.*)$\n?                    # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  title_level_5:
    - match: ^(======) (`?\w.*)$\n
      scope: markup.heading.level.5.asciidoc
      captures:
        1: punctuation.definition.heading.asciidoc
        2: entity.name.section.asciidoc

  # >>>>>>> Asciidoctor >>>>>>>
  #   match: ^(======) (\w.*)$\n?
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>
  # title_level_5:
  #   name: markup.heading.level.5.asciidoc
  #   match: ^(======) (`?\w.*)$\n?                   # <- TWEAKED by @bsmith-n4
  #   captures:
  #     '1': {name: punctuation.definition.heading.asciidoc}
  #     '2': {name: entity.name.section.asciidoc}
  # <<<<<<<<<<<<<<<<<<<<<<<<<<<

#*******************************************************************************
#                                                                              *
#                              R E U S A B L E S                               *
#                                                                              *
#*******************************************************************************
# Resuable contexts...

  #####################
  # ERROR ON EMPTY LINE
  #####################
  # Some element (e.g. quotes) can span multiple lines as long as no empty line
  # is placed between the opening and closing delimiter...
  error_on_empty_line:
    - match: ^\n$
      scope: invalid.illegal.asciidoc
      pop: true

  ##############
  # ANY COMMENTS     ( UNUSED! )
  ##############
  # Include any type of comments.
  any_comments:
    - include: line_comment
    - include: block_comment

#*******************************************************************************
#                                                                              *
#                            M I S C E L A N N E A                             *
#                                                                              *
#*******************************************************************************
# Various definitions added by me, some of which still unused except for tests!

  ####################
  # TYPOGRAPHIC QUOTES
  ####################
  # Added by me to prevent false-positives with monospace...
  # STATUS: UNUSED DRAFT!

  curly_quotes: # NOT USED!
    - match: ("|')(`)
      scope: punctuation.definition.string.begin.asciidoc
    - match: (`)("|')
      scope: punctuation.definition.string.end.asciidoc
      # push:
      #   - match: (`)(\1)
      #     scope: punctuation.definition.string.end.asciidoc
      #     pop: true
      #   - include: monospaced_double # Single backticks are literals!


# /// EOF ///

