// SYNTAX TEST "Packages/Asciidoctor/Syntaxes/Asciidoctor.sublime-syntax"
= Monospace Text Formatting

Manual reference:
https://asciidoctor.org/docs/user-manual/#mono[ยง19.4. Monospace]

Monospace is one of AsciiDoc text formatting elements, belonging to the
https://asciidoctor.org/docs/user-manual/#formatting-marks[_quotes_ category].

== Constrained

Manual reference:
https://asciidoctor.org/docs/user-manual/#constrained-quotes[ยง9.1. Constrained quotes]

Inline code: `Procedure("xyz")`.
//           ^^^^^^^^^^^^^^^^^^                   meta.literalinner.single.asciidoc
//            ^^^^^^^^^^^^^^^^            string.other.literal.single.asciidoc
//           ^                  punctuation.definition.literal.single.begin.asciidoc
//                            ^ punctuation.definition.literal.single.end.asciidoc


=== Constrained Malformed

These are incorrect uses of constrained monospace:

Examples: `VERB`s and xxx`YYY`xxx.



== Unconstrained

Manual reference:
https://asciidoctor.org/docs/user-manual/#unconstrained-quotes[ยง9.2. Unconstrained quotes]

Example: ``VERB``s


== Multi-line

How shoule a monospaced text carried over multiple lines be handled?

If no blank lines are found between the opening and closing delimiter it's fine:

Example: `a very long monospace.
Spanning multiple lines.`
Normal text.

But if a blank line is found then Asciidoctor will not render it as monospaced:

Example: `a very long monospace spanning multiple lines.

// <- invalid.illegal.asciidoc
With blank lines inbetween.` Normal text.
// ^^^^^^^^^^^^^^^^^^^^^^^^^ - string.other.literal.single.asciidoc

Therfore the scope should either bail out or show an error of sorts.

=== With Single-Line Comments

Single-line comments will be ingored in the final text and are fine:

Example: `A monospace spanning multiple lines
// a comment
//^^^^^^^^^^ comment.line.double-slash.asciidoc meta.line.comment.content.asciidoc
with a single line comment inbetween.` Normal text.
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.other.literal.single.asciidoc
//                                    ^^^^^^^^^^^^^ - string.other.literal.single.asciidoc

=== With Block Comments

As for block comemnts, these break-up the monospace quote:

Example: `A monospace spanning multiple lines
////
Block comments are not OK!
// <-     string.other.literal.single.asciidoc
// <-   - comment.block.asciidoc meta.block.comment.content.asciidoc
////
with a block comment inbetween.` Normal text.



=== Misc Tests

Any other block element seems to break the quote too:


Example: `A monospace spanning multiple lines
[NOTE]
with a NOTE ADMON inbetween.` Normal text.




== Edge Cases

See
https://asciidoctor.org/docs/user-manual/#unconstrained-formatting-edge-cases[ยง9.4. Unconstrained formatting edge cases]

=== Unconstrained Within Typographic Quotes

A monospaced phrase inside typographic quotes: "```endpoints```"


// =============================================================================
//                 Inline Monospaced Inside Typographic Quotes
// =============================================================================
// See: https://asciidoctor.org/docs/user-manual/#unconstrained-formatting-edge-cases

Unconstrained inline code within curly quotes:
Exampel: "```Procedure("xyz")```".
//         ^^^^^^^^^^^^^^^^^^^^   meta.literalinner.double.asciidoc
//         ^^                     punctuation.definition.literal.double.begin.asciidoc
//                           ^^   punctuation.definition.literal.double.end.asciidoc
//       ^^                       punctuation.definition.string.begin.asciidoc
//                             ^^ punctuation.definition.string.end.asciidoc

== Typographic Quotes False Positives

// =============================================================================
//                           Test for False-Positives
// =============================================================================
// Bacticks adjacent to single/double quote delimiters (straight) are for making
// the quote curly, and should not be seen as monospaced/inline-code.

Example: '`text`' and "`text`".
//       ^^                    punctuation.definition.string
//             ^^              punctuation.definition.string
//                    ^^       punctuation.definition.string
//                          ^^ punctuation.definition.string
//

Single backticks within typographic quotes are interpreted as literal characters.

E.g. "``endpoints``" and '``endpoints``'


== Unconstrained Within Typographic Quotes

Let's check that these are not misinterpreted inside monospaced:

Hello world `#ZZZ` ssss.

Hello world "```xxx `YYY` xx```" ssss.



// EOF //
