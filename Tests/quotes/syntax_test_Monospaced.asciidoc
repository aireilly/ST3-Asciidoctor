// SYNTAX TEST "Packages/Asciidoctor/Syntaxes/Asciidoctor.sublime-syntax"
= Monospace Text Formatting

Manual reference:
https://asciidoctor.org/docs/user-manual/#mono[ยง19.4. Monospace]

Monospace is one of AsciiDoc text formatting elements, belonging to the
https://asciidoctor.org/docs/user-manual/#formatting-marks[_quotes_ category].

== Constrained

Manual reference:
https://asciidoctor.org/docs/user-manual/#constrained-quotes[ยง9.1. Constrained quotes]

.Source
[source,asciidoc]
This `is monospaced`. This is not.

.Result
============================
This `is monospaced`. This is not.
//   ^^^^^^^^^^^^^^^  meta.literalinner.single.asciidoc
//    ^^^^^^^^^^^^^   string.other.literal.single.asciidoc
//   ^                punctuation.definition.literal.single.begin.asciidoc
//                 ^  punctuation.definition.literal.single.end.asciidoc
============================


== Unconstrained

Manual reference:
https://asciidoctor.org/docs/user-manual/#unconstrained-quotes[ยง9.2. Unconstrained quotes]

.Source
[source,asciidoc]
SublimeText is ``super``fast.

.Result
=============================
SublimeText is ``super``fast.
//             ^^^^^^^^^   meta.literalinner.double.asciidoc
//               ^^^^^     string.other.literal.double.asciidoc
//             ^^          punctuation.definition.literal.double.begin.asciidoc
//                    ^^   punctuation.definition.literal.double.end.asciidoc
//                      ^^^^^  - meta.literalinner.double.asciidoc
=============================


== Multi-line

Monospaced text can span across multiple lines in the same paragraph, as long as no blank lines or block elements are encountered between the opening and closing monospace delimiter:

.Source
[source,asciidoc]
......................................
`a very long monospace.
Spanning multiple lines.` Normal text.
......................................

.Result
=======================================
`a very long monospace.
Spanning multiple lines.` Normal text.
// <-^^^^^^^^^^^^^^^^^^^^  meta.literalinner.single.asciidoc
// <-^^^^^^^^^^^^^^^^^^^   string.other.literal.single.asciidoc
//                      ^  punctuation.definition.literal.single.end.asciidoc
//                       ^^^^^^^^^^^^^^  - meta.literalinner.single.asciidoc
=======================================


=== With Line Comments

Single-line comments inside a monospaced text spanning across multiple lines will be ingored in the final text, and are OK to use:

.Source
[source,asciidoc]
...................................................
`A monospace text spanning multiple lines
// a comment
with a single line comment inbetween.` Normal text.
...................................................

.Result
===================================================
`A monospace text spanning multiple lines
// a comment
// a comment
//^^^^^^^^^^ comment.line.double-slash   meta.line.comment.content
//^^^^^^^^^^ meta.literalinner
with a single line comment inbetween.` Normal text.
// <-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.literalinner.single.asciidoc
===================================================

Block comments (like any other block elements) are not OK, and will break the quote.


=== With Blank Line

But if a blank line is encountered before the closing delimiter -- i.e. if the text spans across multiple paragraphs -- then Asciidoctor will not format the text as monospace:

.Source
[source,asciidoc]
...............................................
`A very long bold text spanning multiple lines.

With blank lines inbetween.`
...............................................

.Result
===============================================
`A very long bold text spanning multiple lines.
// <-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.literalinner.single.asciidoc

// <- invalid.illegal.asciidoc
With blank lines inbetween.`
// ^^^^^^^^^^^^^^^^^^^^^^^^^  - meta.literalinner.single.asciidoc

===============================================

The AsciiDoc syntax will handle such cases by interrupting monospace-parsing when encountering a blank line, and scoping the first blank line as `invalid` -- to draw the user's attention to the problem.


== Edge Cases

See
https://asciidoctor.org/docs/user-manual/#unconstrained-formatting-edge-cases[ยง9.4. Unconstrained formatting edge cases]

=== Unconstrained Within Typographic Quotes

A monospaced phrase inside typographic quotes: "```endpoints```"


// =============================================================================
//                 Inline Monospaced Inside Typographic Quotes
// =============================================================================
// See: https://asciidoctor.org/docs/user-manual/#unconstrained-formatting-edge-cases

Unconstrained inline code within curly quotes:
Exampel: "```Procedure("xyz")```".
//         ^^^^^^^^^^^^^^^^^^^^   meta.literalinner.double.asciidoc
//         ^^                     punctuation.definition.literal.double.begin.asciidoc
//                           ^^   punctuation.definition.literal.double.end.asciidoc
//       ^^                       punctuation.definition.string.begin.asciidoc
//                             ^^ punctuation.definition.string.end.asciidoc

== Typographic Quotes False Positives

// =============================================================================
//                           Test for False-Positives
// =============================================================================
// Bacticks adjacent to single/double quote delimiters (straight) are for making
// the quote curly, and should not be seen as monospaced/inline-code.

Example: '`text`' and "`text`".
//       ^^                    punctuation.definition.string
//             ^^              punctuation.definition.string
//                    ^^       punctuation.definition.string
//                          ^^ punctuation.definition.string
//

Single backticks within typographic quotes are interpreted as literal characters.

E.g. "``endpoints``" and '``endpoints``'


== Unconstrained Within Typographic Quotes

Let's check that these are not misinterpreted inside monospaced:

Hello world `#ZZZ` ssss.

Hello world "```xxx `YYY` xx```" ssss.



// EOF //
